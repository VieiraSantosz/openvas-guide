# !/bin/bash
#
# openvas.sh - faz a instala√ß√£o da ferramenta OpenVAS (Vulnerability Assessment System)
#
# Autor..: Wesley Santos  <wesantos@goaheadit.com.br>
# Aux√≠lio: Daniel Brand√£o <dbrandao@goaheadit.com.br>
#
# -------------------------------------------------------------------------------------
#
# Este programa faz a instala√ß√£o da ferramenta OpenVAS (Vulnerability Assessment System), 
# retornando o seu link de acesso, usu√°rio e senha. 
#


# Fun√ß√£o para exibir a barra de progresso sincronizada com a execu√ß√£o real do comando
progress_bar() {
    local cmd="$1"      # Comando a ser executado passado como argumento
    local log_file="$2" # Nome do arquivo onde ser√° armazenada a sa√≠da do comando

    rm -f "$log_file" # Remove o arquivo de log anterior, caso exista
    touch "$log_file" # Cria um novo arquivo vazio para armazenar a sa√≠da do comando

    # Executa o comando fornecido em segundo plano, redirecionando sua sa√≠da para o arquivo de log
    eval "$cmd" >"$log_file" 2>&1 &
    local cmd_pid=$!  # Captura o PID (identificador do processo) do comando em execu√ß√£o

    local total_lines=100     # Define um valor estimado de total de linhas processadas para calcular a barra de progresso
    local current_line=0      # Inicializa a vari√°vel que ir√° contar as linhas processadas no log
    local elapsed_time=0      # Tempo decorrido desde o in√≠cio da execu√ß√£o do comando
    local max_time=180        # Tempo m√°ximo (em segundos) antes de come√ßar a exibir avisos (2 minutos)
    local warned=0            # Contador de quantos avisos j√° foram emitidos
    local warning_limit=3     # Limite m√°ximo de avisos para o usu√°rio
    local last_warning_time=0 # Registra o tempo do √∫ltimo aviso exibido

    # Loop que verifica continuamente se o processo ainda est√° rodando
    while kill -0 $cmd_pid 2>/dev/null; do

        # Conta o n√∫mero de linhas geradas no arquivo de log at√© o momento
        current_line=$(wc -l < "$log_file")  
        
        # Calcula a porcentagem de progresso baseado no n√∫mero de linhas geradas
        local progress=$((current_line * 100 / total_lines))

        # Garante que o progresso n√£o ultrapasse 98% (para evitar uma finaliza√ß√£o prematura)
        if [ $progress -gt 98 ]; then progress=98; fi  

        # Calcula quantos caracteres preencher na barra de progresso
        local filled=$((progress / 2)) # A cada 2% um ponto ser√° preenchido
        local empty=$((50 - filled))   # Espa√ßos vazios restantes para completar a barra

        # Exibe a barra de progresso no terminal
        printf "\r["                    # Retorna ao in√≠cio da linha para sobreescrever a barra de progresso anterior
        printf "%0.s." $(seq 1 $filled) # Imprime os pontos correspondentes ao progresso
        printf "%0.s " $(seq 1 $empty)  # Imprime os espa√ßos restantes
        printf "] %d%%" "$progress"     # Exibe a porcentagem de progresso
        sleep 0.5                       # Aguarda meio segundo antes da pr√≥xima atualiza√ß√£o

        ((elapsed_time++)) # Incrementa o tempo decorrido

        # Verifica se o tempo m√°ximo foi atingido e controla a exibi√ß√£o de avisos
        if ((elapsed_time >= max_time)); then

            if ((warned < warning_limit)); then
                local current_time=$(date +%s) # Obt√©m o tempo atual em segundos

                if ((current_time - last_warning_time >= 180)); then  # Se j√° passaram 90 segundos desde o √∫ltimo aviso
                    printf "\n\nO processo est√° demorando mais que o esperado. Aguarde...\n\n"

                    last_warning_time=$current_time # Atualiza o tempo do √∫ltimo aviso
                    ((warned++))                    # Incrementa o contador de avisos
                fi
            fi
        fi
    done

    # Quando o processo termina, exibe a barra de progresso completa
    printf "\r[..................................................] 100%% conclu√≠do\n"
}


# Fun√ß√£o para verificar se o script est√° sendo executado como root
root () {
    if [ "$(id -u)" != 0 ]; then
        clear
        echo -e "\nüö´ Aten√ß√£o!!!"
        echo -e "\nPara o funcionamento desse script, necess√°rio executar com o usu√°rio administrador (root).\n\n"
        exit 1
    fi    
}


# Fun√ß√£o para obter o IP da m√°quina
get_ip () {
    IP_LOCAL=$(hostname -I | awk '{print $1}')
}


# Fun√ß√£o para escrever o banner no in√≠cio da instala√ß√£o
banner () {
    clear
    echo "

      /######                                /##    /##  /######   /###### 
     /##__  ##                              | ##   | ## /##__  ## /##__  ##
    | ##  \ ##  /######   /######  /####### | ##   | ##| ##  \ ##| ##  \__/
    | ##  | ## /##__  ## /##__  ##| ##__  ##|  ## / ##/| ########|  ###### 
    | ##  | ##| ##  \ ##| ########| ##  \ ## \  ## ##/ | ##__  ## \____  ##
    | ##  | ##| ##  | ##| ##_____/| ##  | ##  \  ###/  | ##  | ## /##  \ ##
    |  ######/| #######/|  #######| ##  | ##   \  #/   | ##  | ##|  ######/
     \______/ | ##____/  \_______/|__/  |__/    \_/    |__/  |__/ \______/ 
              | ##                                                       
              | ##                                        ùëÄùí∂ùíπùëí ùêµùìé: ùí≤ ùëíùìàùìÅùëíùìé ùíÆùí∂ùìÉùìâùëúùìà               
              |__/"
}


# Fun√ß√£o para verificar os requisitos m√≠nimos do Sistema Operacional
check_system_minimum () {
    echo ""

    # Verifica a distribui√ß√£o do sistema operacional 
    source /etc/os-release
    OS_NAME=$ID
    VERIFY_OS=false

    sleep 1.5
    if [ "$OS_NAME" == "ubuntu" ] || [ "$OS_NAME" == "debian" ]; then
        VERIFY_OS=true
        echo "‚úÖ Sistema Operacional..........: $OS_NAME"
    else 
        echo "‚ùå Sistema Operacional..........: $OS_NAME"
    fi


    # Verifica a quantidade de n√∫cleos do sistema operacional  
    CPU_MIN=4 
    CPU_COUNT=$(nproc)
    VERIFY_CPU=false

    sleep 1.5
    if [ "$CPU_COUNT" -ge "$CPU_MIN" ]; then
        VERIFY_CPU=true
        echo "‚úÖ CPU..........................: $CPU_COUNT n√∫cleos"        
    else 
        echo "‚ùå CPU..........................: $CPU_COUNT n√∫cleos"
    fi


    # Verifica a quantidade de RAM do sistema operacional  
    RAM_MIN=8
    RAM_TOTAL=$(free -g | awk '/Mem:/ {print $2}')
    VERIFY_RAM=false

    sleep 1.5
    if [ "$RAM_TOTAL" -ge "$RAM_MIN" ]; then
        VERIFY_RAM=true
        echo "‚úÖ RAM..........................: $RAM_TOTAL GB"
    else 
        echo "‚ùå RAM..........................: $RAM_TOTAL GB"
    fi


    # Verifica a quantidade de DISCO do sistema operacional  
    DISK_MIN=32
    DISK_AVAILABLE=$(df --output=avail -BG / | tail -1 | awk '{print substr($1, 1, length($1)-1)}')     
    VERIFY_DISK=false

    sleep 1.5
    if [ "$DISK_AVAILABLE" -ge "$DISK_MIN" ]; then
        VERIFY_DISK=true
        echo "‚úÖ DISCO........................: $DISK_AVAILABLE GB"
    else 
        echo "‚ùå DISCO........................: $DISK_AVAILABLE GB"
    fi


    # Informa os requisitos m√≠nimos necess√°rios para instala√ß√£o 
    sleep 1.5 
    if [ "$VERIFY_OS" = "false" ] || [ "$VERIFY_CPU" = "false" ] || [ "$VERIFY_RAM" = "false" ] || [ "$VERIFY_DISK" = "false" ]; then
        echo -e "\n\nSeu sistema operacional n√£o possui os requisitos m√≠nimos necess√°rios para instala√ß√£o."
        echo -e "\nOs requisitos m√≠nimos s√£o os seguintes:\n"
        echo "Distribui√ß√£o do Sistema Operacional: Debian ou Ubuntu"
        echo "CPU................................: $CPU_MIN n√∫cleos"
        echo "RAM................................: $RAM_MIN GB"
        echo "Disco Dispon√≠vel...................: $DISK_MIN GB"
        echo -e "\n\n--------------------------------------------------------------------------------\n\n"
        exit 1

    else
        echo -e "\n\nSeu sistema operacional possui todos os requisitos m√≠nimos necess√°rios para instala√ß√£o."
        echo -e "\nSua instala√ß√£o ir√° come√ßar em:\n"
        
        for i in $(seq 5 -1 1); do
            echo "$i"
            sleep 1
        done
        sleep 1
    fi
}


# Fun√ß√£o para verificar se existem algum servi√ßo do OpenVAS (Vulnerability Assessment System)
openvas_services () {

    # Busca por servi√ßos do OpenVAS (Vulnerability Assessment System)
    SERVICES=$(sudo find / -name "openvas" 2>/dev/null | head -n 1)

    # Verifica se encontrou algum servi√ßo do OpenVAS (Vulnerability Assessment System)
    if [ -n "$SERVICES" ]; then
        echo -e "\n\n‚ö†Ô∏è Foram encontrados servi√ßos do OpenVAS (Vulnerability Assessment System) ativo na sua m√°quina."
        echo -e "\nDeseja seguir com a instala√ß√£o?"
        echo -e "OBS: O instalador ir√° remover o OpenVAS existente e instalar um novo."
        echo -e "\n(1) Seguir com a instala√ß√£o"
        echo "(2) N√£o realizar a instala√ß√£o"

        # Captura a escolha do usu√°rio
        echo ""
        read -p "Escolha uma op√ß√£o (1 ou 2): " OPC

        if [ "$OPC" == "1" ]; then
            echo -e "\n\nRemovendo OpenVAS (Vulnerability Assessment System) existente"
            openvas_remove

            echo -e "\n\nInstalando os pacotes do novo OpenVAS (Vulnerability Assessment System)"
            openvas_packages

            echo -e "\n\nInicinado os servi√ßos do novo OpenVAS (Vulnerability Assessment System)\n"
            openvas_server
        
        elif [ "$OPC" == "2" ]; then
            echo -e "\n\nN√£o foi realizada a instala√ß√£o do OpenVAS (Vulnerability Assessment System)"
            echo -e "\n\n-----------------------------------------------------------------------\n\n"
            exit 1
        
        else
            echo -e "\n\nüö´ Por favor, selecione uma op√ß√£o v√°lida!!!"
            openvas_services
        fi

    else
        echo -e "\n\nInstalando os pacotes do OpenVAS (Vulnerability Assessment System)"
        openvas_packages

        echo -e "\n\nInicinado os servi√ßos do OpenVAS (Vulnerability Assessment System)\n"
        openvas_server
    fi
}


# Fun√ß√£o para remover/desisntalar o OpenVAS (Vulnerability Assessment System)
openvas_remove () {
    path_vas=$(find / -name "docker-compose.yml" | grep "openvas" | xargs -I {} dirname {})

    cd $path_vas 2>/dev/null
    progress_bar "docker compose down" "/tmp/docker_down_log"
    sudo rm -rf $path_vas 2>/dev/null
}


# Fun√ß√£o para criar o diret√≥rio da ferramenta
openvas_diretory () {
    mkdir /openvas 2>/dev/null
    cd /openvas 2>/dev/null
    curl -f -L https://greenbone.github.io/docs/latest/_static/docker-compose-22.4.yml -o docker-compose.yml 2> /dev/null
}


# Fun√ß√£o para instalar os pacotes do Docker
openvas_packages () {
    progress_bar "sudo apt-get install ca-certificates curl" "/tmp/apt_certificates_log"

    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
     
    progress_bar "sudo apt-get update && \
                  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y" "/tmp/apt_docker_log"
}


#Fun√ß√£o para ativar os servi√ßos do OpenVAS (Vulnerability Assessment System)
openvas_server () {
    openvas_diretory

    ARQUIVO="docker-compose.yml"

    sed -i "s|127.0.0.1|${IP_LOCAL}|g" "$ARQUIVO"

    docker compose up -d
}


# Fun√ß√£o para mostrar os acessos do OpenVAS (Vulnerability Assessment System)
openvas_acess () {
    get_ip

    echo -e "\n\nAcesso ao OpenVAS (Vulnerability Assessment System):"
    echo -e "\nLink de acesso: http://${IP_LOCAL}:9392"
    echo -e "User..........: admin"
    echo -e "Senha.........: admin"
}


#################################################################################################################################


### Parte 1 - Validar se o Sistema Operacional atende os requisitos m√≠nimos necess√°rios

root
banner

echo -e "\n\n----- Verificando se seu Sistema Operacional atende os requisitos m√≠nimos ------"
check_system_minimum
echo -e "\n\n--------------------------------------------------------------------------------"

############################################################


### Parte 2 - Instalar o Docker e o OpenVAS (Vulnerability Assessment System)

banner

echo -e "\n\n------ 1. Instalando o OpenVAS (Vulnerability Assessment System) ------"
sleep 2
openvas_services
echo -e "\n\n- Instala√ß√£o do OpenVAS (Vulnerability Assessment System) finalizada --"

############################################################


### Parte 3 - Acesso ao servidor OpenVAS (Vulnerability Assessment System)

echo -e "\n\n\n\n\n-------------------------- Acesso ao OpenVAS --------------------------"
sleep 2

openvas_acess
echo -e "\n\nArquivos de instala√ß√£o do OpenVAS est√£o localizados dentro do diret√≥rio raiz em: /openvas"

echo -e "\n\n-----------------------------------------------------------------------\n\n"

############################################################